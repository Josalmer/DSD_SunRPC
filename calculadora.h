/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int arr_len;
	double *arr_val;
} arr;

struct coordenadas {
	double x;
	double y;
};
typedef struct coordenadas coordenadas;

struct matrix {
	arr mat;
	int cols;
};
typedef struct matrix matrix;

struct dresponse {
	int errno;
	union {
		double res;
	} dresponse_u;
};
typedef struct dresponse dresponse;

struct vresponse {
	int errno;
	union {
		arr res;
	} vresponse_u;
};
typedef struct vresponse vresponse;

struct mresponse {
	int errno;
	union {
		matrix res;
	} mresponse_u;
};
typedef struct mresponse mresponse;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplica_1_argument {
	double arg1;
	double arg2;
};
typedef struct multiplica_1_argument multiplica_1_argument;

struct divide_1_argument {
	double arg1;
	double arg2;
};
typedef struct divide_1_argument divide_1_argument;

struct dmanhattan_1_argument {
	coordenadas arg1;
	coordenadas arg2;
};
typedef struct dmanhattan_1_argument dmanhattan_1_argument;

struct deuclides_1_argument {
	coordenadas arg1;
	coordenadas arg2;
};
typedef struct deuclides_1_argument deuclides_1_argument;

struct sumavectores_1_argument {
	arr arg1;
	arr arg2;
};
typedef struct sumavectores_1_argument sumavectores_1_argument;

struct restavectores_1_argument {
	arr arg1;
	arr arg2;
};
typedef struct restavectores_1_argument restavectores_1_argument;

struct multiplicavectores_1_argument {
	arr arg1;
	arr arg2;
};
typedef struct multiplicavectores_1_argument multiplicavectores_1_argument;

struct dividevectores_1_argument {
	arr arg1;
	arr arg2;
};
typedef struct dividevectores_1_argument dividevectores_1_argument;

struct sumamatrix_1_argument {
	matrix arg1;
	matrix arg2;
};
typedef struct sumamatrix_1_argument sumamatrix_1_argument;

#define CALCPROG 0x20000001
#define CALCVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  dresponse * suma_1(double , double , CLIENT *);
extern  dresponse * suma_1_svc(double , double , struct svc_req *);
#define RESTA 2
extern  dresponse * resta_1(double , double , CLIENT *);
extern  dresponse * resta_1_svc(double , double , struct svc_req *);
#define MULTIPLICA 3
extern  dresponse * multiplica_1(double , double , CLIENT *);
extern  dresponse * multiplica_1_svc(double , double , struct svc_req *);
#define DIVIDE 4
extern  dresponse * divide_1(double , double , CLIENT *);
extern  dresponse * divide_1_svc(double , double , struct svc_req *);
#define DMANHATTAN 5
extern  dresponse * dmanhattan_1(coordenadas , coordenadas , CLIENT *);
extern  dresponse * dmanhattan_1_svc(coordenadas , coordenadas , struct svc_req *);
#define DEUCLIDES 6
extern  dresponse * deuclides_1(coordenadas , coordenadas , CLIENT *);
extern  dresponse * deuclides_1_svc(coordenadas , coordenadas , struct svc_req *);
#define SUMAVECTORES 7
extern  vresponse * sumavectores_1(arr , arr , CLIENT *);
extern  vresponse * sumavectores_1_svc(arr , arr , struct svc_req *);
#define RESTAVECTORES 8
extern  vresponse * restavectores_1(arr , arr , CLIENT *);
extern  vresponse * restavectores_1_svc(arr , arr , struct svc_req *);
#define MULTIPLICAVECTORES 9
extern  vresponse * multiplicavectores_1(arr , arr , CLIENT *);
extern  vresponse * multiplicavectores_1_svc(arr , arr , struct svc_req *);
#define DIVIDEVECTORES 10
extern  vresponse * dividevectores_1(arr , arr , CLIENT *);
extern  vresponse * dividevectores_1_svc(arr , arr , struct svc_req *);
#define REDUCE 11
extern  dresponse * reduce_1(arr , CLIENT *);
extern  dresponse * reduce_1_svc(arr , struct svc_req *);
#define SUMAMATRIX 12
extern  mresponse * sumamatrix_1(matrix , matrix , CLIENT *);
extern  mresponse * sumamatrix_1_svc(matrix , matrix , struct svc_req *);
extern int calcprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  dresponse * suma_1();
extern  dresponse * suma_1_svc();
#define RESTA 2
extern  dresponse * resta_1();
extern  dresponse * resta_1_svc();
#define MULTIPLICA 3
extern  dresponse * multiplica_1();
extern  dresponse * multiplica_1_svc();
#define DIVIDE 4
extern  dresponse * divide_1();
extern  dresponse * divide_1_svc();
#define DMANHATTAN 5
extern  dresponse * dmanhattan_1();
extern  dresponse * dmanhattan_1_svc();
#define DEUCLIDES 6
extern  dresponse * deuclides_1();
extern  dresponse * deuclides_1_svc();
#define SUMAVECTORES 7
extern  vresponse * sumavectores_1();
extern  vresponse * sumavectores_1_svc();
#define RESTAVECTORES 8
extern  vresponse * restavectores_1();
extern  vresponse * restavectores_1_svc();
#define MULTIPLICAVECTORES 9
extern  vresponse * multiplicavectores_1();
extern  vresponse * multiplicavectores_1_svc();
#define DIVIDEVECTORES 10
extern  vresponse * dividevectores_1();
extern  vresponse * dividevectores_1_svc();
#define REDUCE 11
extern  dresponse * reduce_1();
extern  dresponse * reduce_1_svc();
#define SUMAMATRIX 12
extern  mresponse * sumamatrix_1();
extern  mresponse * sumamatrix_1_svc();
extern int calcprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_arr (XDR *, arr*);
extern  bool_t xdr_coordenadas (XDR *, coordenadas*);
extern  bool_t xdr_matrix (XDR *, matrix*);
extern  bool_t xdr_dresponse (XDR *, dresponse*);
extern  bool_t xdr_vresponse (XDR *, vresponse*);
extern  bool_t xdr_mresponse (XDR *, mresponse*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplica_1_argument (XDR *, multiplica_1_argument*);
extern  bool_t xdr_divide_1_argument (XDR *, divide_1_argument*);
extern  bool_t xdr_dmanhattan_1_argument (XDR *, dmanhattan_1_argument*);
extern  bool_t xdr_deuclides_1_argument (XDR *, deuclides_1_argument*);
extern  bool_t xdr_sumavectores_1_argument (XDR *, sumavectores_1_argument*);
extern  bool_t xdr_restavectores_1_argument (XDR *, restavectores_1_argument*);
extern  bool_t xdr_multiplicavectores_1_argument (XDR *, multiplicavectores_1_argument*);
extern  bool_t xdr_dividevectores_1_argument (XDR *, dividevectores_1_argument*);
extern  bool_t xdr_sumamatrix_1_argument (XDR *, sumamatrix_1_argument*);

#else /* K&R C */
extern bool_t xdr_arr ();
extern bool_t xdr_coordenadas ();
extern bool_t xdr_matrix ();
extern bool_t xdr_dresponse ();
extern bool_t xdr_vresponse ();
extern bool_t xdr_mresponse ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplica_1_argument ();
extern bool_t xdr_divide_1_argument ();
extern bool_t xdr_dmanhattan_1_argument ();
extern bool_t xdr_deuclides_1_argument ();
extern bool_t xdr_sumavectores_1_argument ();
extern bool_t xdr_restavectores_1_argument ();
extern bool_t xdr_multiplicavectores_1_argument ();
extern bool_t xdr_dividevectores_1_argument ();
extern bool_t xdr_sumamatrix_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
